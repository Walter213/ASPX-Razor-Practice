@{
    /**/

    Layout = "~/_Layout.cshtml";
    Page.Title = "Crud : Insert";

    var thebutton = Request.Form["formButton"];

    //variables to hold values for the Product record fields
    var productname = "";
    var quantityperunit = "";
    var unitprice = "";
    var unitsinstock = "";
    var unitsonorder = "";
    var reorderlevel = "";
    var selectedsupplier = "";
    var selectedcategory = "";
    var discontinued = "";

    var db = Database.Open("NWDB");

    var catcommand = "SELECT CategoryID, CategoryName "
            + "FROM Categories "
            + "ORDER BY CategoryName";
    // the command will return 0, 1 or more records
    //therefore use .Query()
    var catResults = db.Query(catcommand);
    var supcommand = "SELECT SupplierID, CompanyName "
                    + "FROM Suppliers "
                    + "ORDER BY CompanyName";
    var supResults = db.Query(supcommand);

    //coding of validation controls
    //Validation controls are run on the server side
    //There is one validation control per input control
    //Valiation controls consists of validators
    //There can be multiple Validators inside the validation control
    //Validation controls are linked to the input control via the control name
    //structure of a Validator is dependent on the validation of that Validator
    //Validators do not execute unless there is data present except for .Required
    Validation.Add("ProductName", Validator.Required("Product Name is required."), Validator.StringLength(40, 1, "Product Name is limited to 40 characters"));
    Validation.Add("QuantityPerUnit", Validator.StringLength(20,0,"Quantity per Unit os limited to 20 characters"));
    Validation.Add("UnitPrice", Validator.Range(0.00, double.MaxValue,"Unit Price cannot be negative because who wants to give you money"));
    Validation.Add("UnitInStock", Validator.Integer("Units must be a whole value dumbass"), Validator.Range(0.00, 32676, "Units in stock must be between 0 and 32767"));
    Validation.Add("UnitOnOrder", Validator.Integer("Units must be a whole value dumbass"), Validator.Range(0.00, 32676, "Units in stock must be between 0 and 32767"));
    Validation.Add("ReorderLevel", Validator.Integer("Units must be a whole value dumbass"), Validator.Range(0.00, 32676, "Units in stock must be between 0 and 32767"));

    //other exmaples
    //field matching
    Validation.Add("Password", Validator.Required("Password is required."), Validator.EqualsTo("ConfirmPassword", "Password not confirmed"));
    // pathern matching: regular expressions
    Validation.Add("Postal Code", Validator.Required("Postal Code is required"), Validator.Regex("[A-Za-z][0-9][A-Za-z][0-9][A-Za-z][0-9]", "Invalid Postal Code"));
}

@section head{
    <link href="~/Content/MyCustomStyles.css" rel="stylesheet" />
}

@section banner{
    <h1>CRUD : Insert</h1>
    <div class="alert alert-info">
        <blockquote>
            This form will demonstrate the create (insert) of CRUD. It will
            demonstrate using bootstrap text alignment for setting up right align
            text, default left aligned controls and centered aligned submit buttons.
            The input controls and their label text controls are in a 2 column format.
            The submit buttons are centered on another row. The introduction
            blockquote uses the bootstrap class alert alert-info. Tool tips are used.
            Try/Catch will be used to capture processing errors.
        </blockquote>
    </div>

}
@if (IsPost)
{

    if (thebutton.Equals("reset"))
    {
        <p class="col-sm-11 text-center">Cleared by user.</p>
        discontinued = "";
    }
    else
    {
        //retrieve form input values
        productname = Request.Form["ProductName"];
        selectedsupplier = Request.Form["SupplierID"];
        selectedcategory = Request.Form["CategoryID"];
        quantityperunit = Request.Form["QuantityPerUnit"];
        unitprice = Request.Form["UnitPrice"];
        unitsinstock = Request.Form["UnitsInStock"];
        unitsonorder = Request.Form["UnitsOnOrder"];
        reorderlevel = Request.Form["ReorderLevel"];
        discontinued = Request.Form["Discontinued"];

        //validation occurs against data that will be sent for proccessing against your database
        if (Validation.IsValid())
        {

            //process incoming data
            //user friendly error handling
            try
            {
                //create sql insert command
                //note the number and position of placeholders for each supplied field
                var insertcommand = "INSERT INTO PRODUCTS (ProductName, SupplierID, CategoryID, QuantityPerUnit, " + "UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel, " + "Discontinued) "
                    + "VALUES (@0, @1, @2, @3, @4, @5, @6, @7, @8)";

                //code sql command here

                //execute the insert command
                //the method used is the .Execute(command string, list of placeholder variables)
                //ternary operator used for nullable fields

                // need insertcommand and productname, the rest is optional

                db.Execute(insertcommand, productname,
                    selectedsupplier.Equals("0") ? null : selectedsupplier,
                    selectedcategory.Equals("0") ? null : selectedcategory,
                    string.IsNullOrEmpty(quantityperunit) ? null : quantityperunit,
                    string.IsNullOrEmpty(unitprice) ? null : unitprice,
                    string.IsNullOrEmpty(unitsinstock) ? null : unitsinstock,
                    string.IsNullOrEmpty(unitsonorder) ? null : unitsonorder,
                    string.IsNullOrEmpty(reorderlevel) ? null : reorderlevel, 0);

                //code execution statement here


                //use of bootstrap text positioning
                //success message
                <p class="col-sm-11 text-center">
                    <span style="color:green">
                        <strong>
                            Successfully added to list
                        </strong>
                    </span>
                </p>
            }
            catch (Exception ex)
            {
                <p class="col-sm-11 text-center alert alert-danger">
                    <span style="color:firebrick">
                        <strong>
                            @ex.Message
                        </strong>
                    </span>
                </p>
            }
        }
    }
}

@* This is two ways to display your validation error messages:
    a) using .ValidationSummary()
    b) using .ValidationMessage("")

    a) messages are displayed by default as a bulleted list
       all error messages for the control are displayed
    b) messages are displayed where the message display control is physically positioned
       only the first error message is displayed
       must be used on every control individually*@

@Html.ValidationSummary()

<form id="theForm" action="" method="post">
    <div class="row ">
        <div class="col-sm-5 text-right">
            <label id="ProductName">Name:</label><br />
            <label id="SupplierID">Supplier:</label><br />
            <label id="CategoryID">Category:</label><br />
            <label id="QuantityPerUnit">Qty/Unit:</label><br />
            <label id="UnitPrice">Unit Price:</label><br />
            <label id="UnitsInStock">QOH:</label><br />
            <label id="UnitsOnOrder">QOO:</label><br />
            <label id="ReorderLevel">ROL:</label><br />
            <label id="Discontinued">Disc.:</label><br /><br />
        </div>
        <div class="col-sm-5">
            <!-- the title attribute creates the tooltip for the control-->
            <input name="ProductName" id="ProductName" type="text" value="@productname"
                   title="Product Name." />
            @Html.ValidationMessage("ProductName")
            <br />
            <select id="SupplierID" name="SupplierID">
                <option value="0">select ...</option>
                <!--  loop code here-->
                @foreach (var supitem in supResults)
                {
                    if (selectedsupplier == supitem[0].ToString())
                    {
                        <option value="@supitem[0]" selected>
                            @supitem[1]
                        </option>
                    }
                    else
                    {
                        <option value="@supitem[0]">
                            @supitem[1]
                        </option>
                    }
                }
            </select><br />
            <select id="CategoryID" name="CategoryID">
                <option value="0">select ...</option>
                <!--  loop code here-->
                @foreach (var catitem in catResults)
                {
                    if (selectedcategory == catitem[0].ToString())
                    {
                        <option value="@catitem.CategoryID" selected>
                            @catitem[1]
                        </option>
                    }
                    else
                    {
                        <option value="@catitem.CategoryID">
                            @catitem[1]
                        </option>
                    }
                }
            </select><br />
            <input name="QuantityPerUnit" id="QuantityPerUnit" type="text" value="@quantityperunit" /><br />
            <input name="UnitPrice" id="UnitPrice" type="text" value="@unitprice" title="Unit Price"/><br />
            <input name="UnitsInStock" id="UnitsInStock" type="text" value="@unitsinstock" title="Quantity on Hand." /><br />
            <input name="UnitsOnOrder" id="UnitsOnOrder" type="text" value="@unitsonorder" title="Quantity on Order." /><br />
            <input name="ReorderLevel" id="ReorderLevel" type="text" value="@reorderlevel" title="Reorder Level." /><br />
            @* HTML5 client side validation 

            <input name="UnitPrice" id="UnitPrice" type="number" value="@unitprice"
               step="0.01" min="0.00" /><br />
            <input name="UnitsInStock" id="UnitsInStock" type="number" value="@unitsinstock"
               step="1" min="0" title="Quantity on Hand." /><br />
            <input name="UnitsOnOrder" id="UnitsOnOrder" type="text" value="@unitsonorder"
               step="1" min="0" title="Quantity on Order." /><br />
            <input name="ReorderLevel" id="ReorderLevel" type="text" value="@reorderlevel"
               step="1" min="0" title="Reorder Level." /><br /> *@

            <input name="Discontinued" id="Discontinued" type="checkbox"
                   title="Product is discontinued if checked."
                   @(string.IsNullOrEmpty(discontinued) ? "" : "checked") /><br /><br />
        </div>
    </div>
    <div>
        <div class="col-sm-11 text-center">
            <button type="submit" name="formButton" value="submit"
                    class="btn btn-primary" style="width:90px">
                Add
            </button>&nbsp;&nbsp;

            @* If you need to override any html5 client side validation for a button then add the attribute formovalidate to the button *@

            <button type="submit" name="formButton" value="reset"
                    class="btn " style="width:90px" formnovalidate>
                Clear
            </button>
        </div>
    </div>
</form>
@section footer{
    &copy; CPSC1517 Nait, all rights reserved
}
